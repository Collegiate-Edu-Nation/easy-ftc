@startuml

left to right direction

abstract class Mechanism {
    # opMode: LinearOpMode
    # hardwareMap: HardwareMap
    # count: int
    # names: String[]
    # reverse: boolean
    # reverseDevices: String[]
    # gamepad: Gamepad
    # timer: ElapsedTime
    # mechanismName: String
    {abstract}# init()
    {abstract}+ control()
    {abstract}# reverse()
    # wait(double time)
}

abstract class "Builder<T extends Builder<T>>" as Mechanism_Builder {
    # Builder(LinearOpMode opMode, HardwareMap hardwareMap)
    + reverse(): T
    + reverse(String deviceName): T
    + reverse(String[] deviceNames): T
    + gamepad(Gamepad gamepad): T
    {abstract}+ names(String[] names): T
    {abstract}+ build(): Mechanism
    {abstract}# self(): T
}

abstract class MotorMechanism<E> {
    # motors: DcMotor[] 
    # motorsEx: DcMotorEx[] 
    # imu: IMU
    # encoder: boolean
    # behavior: DcMotor.ZeroPowerBehavior
    # up: double
    # down: double
    # velocityMultiplier: double
    # distanceMultiplier: double
    # diameter: double
    # length: double
    # gearing: double
    # deadzone: double
    # logo: LogoFacingDirection
    # usb: UsbFacingDirection
    # layout: Drive.Layout
    - connect: String
    {abstract}+ control(double multiplier)
    {abstract}+ command(E direction, double measurement, double power)
    # validate(double multiplier)
    # validate(double measurement, double power)
    # reverse(String deviceName)
    # init()
    # moveForMeasurement(double[] unscaledMovements, double measurement, double power, boolean limit)
    # limitsNotReached(double direction, double[] movements): boolean
    - limitsNotReachedTimeBased(double direction): boolean
    - limitsNotReachedDistanceBased(double direction, double[] movements): boolean
    # setPositions(int[] positions, int[] currentPositions)
    # setModesEx(DcMotorEx.RunMode runMode)
    # setModes(DcMotor.RunMode runMode)
    # setPowers(double[] movements)
    # setPowers()
    # setDirections(boolean reverse)
    - setDirectionsDefault()
    - setDirectionsReversed()
    # setBehaviors(DcMotor.ZeroPowerBehavior behavior)
    # getMotorTypes(): MotorConfigurationType[]
    # getGearing(MotorConfigurationType[] motorTypes): double
    + setGearing()
    # motorsAreBusy(double[] movements): boolean
    # getAchieveableMaxTicksPerSecond(MotorConfigurationType[] motorTypes): double
    # getTicksPerRev(MotorConfigurationType[] motorTypes): double
    # getCurrentPositions(): int[]
    # map(double controllerValue): double
    # scaleDirections(double[] motorDirections, double power): double[]
    # calculatePositions(double distance, double[] movements): int[]
    - min(double[] arr): double
    - min(double a, double b, double c, double d): double
}

abstract class ServoMechanism<E> {
    # servos: Servo[]
    # smooth: boolean
    # increment: double
    # incrementDelay: double
    # delay: double
    {abstract}+ command(E direction)
    # reverse(String deviceName)
    # init()
    # setPositionsByIncrement(double position, double movement): double
    # setPositionsByIncrementUntilComplete(double position, double movement)
    # setPositions(double movement)
    # setDirections(boolean reverse)
}

abstract class "Builder<T extends Builder<T>> extends Mechanism.Builder<T>" as MotorMechanism_Builder {
    # Builder(LinearOpMode opMode, HardwareMap hardwareMap)
    + encoder(): T
    + diameter(double diameter): T
    + length(double length): T
    + gearing(double gearing): T
    + deadzone(double deadzone): T
    + logo(LogoFacingDirection logo): T
    + usb(UsbFacingDirection usb): T
    {abstract}+ names(String[] names): T
    {abstract}+ build(): MotorMechanism<?>
    {abstract}+ self(): T
}

abstract class "Builder<T extends Builder<T>> extends Mechanism.Builder<T>" as ServoMechanism_Builder {
    # Builder(LinearOpMode opMode, HardwareMap hardwareMap)
    + smooth(): T
    + increment(double increment): T
    + incrementDelay(double incrementDelay): T
    + delay(double delay): T
    {abstract}+ names(String[] names): T
    {abstract}+ build(): ServoMechanism<?>
    {abstract}# self(): T
}

class Arm<Arm.Direction> {
    + control(double power)
    + control()
    + command(Direction direction, double measurement, double power)
    # controlToDirection(boolean lb, boolean rb): double
    # languageToDirection(Direction direction): double
}

class Claw<Claw.Direction> {
    - open: double
    - close: double
    + control()
    + command(Direction direction)
    # controlToDirection(double current, boolean openButton, boolean closeButton): double
    # languageToDirection(Direction direction): double
}

class Drive<Drive.Direction> {
    - type: Type
    + control(double multiplier)
    + control()
    + command(Direction direction, double measurement, double power)
    # controlToDirection(double heading, float leftY, float leftX, float rightY, float rightX): double[]
    - controlToDirectionDifferential(double leftY, double rightY, double rightX): double[]
    - controlToDirectionMecanum(double heading, double leftY, double leftX, double rightX): double[]
    - axesToDirection(double[] axes, double heading): double[]
    # languageToDirection(Direction direction, double heading): double[]
    - languageToDirectionDifferential(Direction direction): double[]
    - languageToDirectionMecanum(Direction direction): double[]
}

class Lift<Lift.Direction> {
    + control(double multiplier)
    + control()
    + command(Direction direction, double measurement, double power)
    # controlToDirection(float lt, float rt): double
    # languageToDirection(Direction direction): double
}

class "Builder<Builder>" as Arm_Builder {
    + Builder(LinearOpMode opMode, HardwareMap hardwareMap)
    + reverse(): Builder
    + reverse(String deviceName): Builder
    + reverse(String[] deviceNames): Builder
    + gamepad(Gamepad gamepad): Builder
    + encoder(): Builder
    + diameter(double diameter): Builder
    + length(double length): Builder
    + gearing(double gearing): Builder
    + count(int count): Builder
    + names(String[] names): Builder
    + behavior(DcMotor.ZeroPowerBehavior behavior): 
    + up(double up): Builder
    + down(double down): Builder
    + build(): Arm
    # self(): Builder
}

class "Builder<Builder>" as Claw_Builder {
    + Builder(LinearOpMode opMode, HardwareMap hardwareMap)
    + reverse(): Builder
    + reverse(String deviceName): Builder
    + reverse(String[] deviceNames): Builder
    + gamepad(Gamepad gamepad): Builder
    + smooth(): Builder
    + increment(double increment): Builder
    + incrementDelay(double incrementDelay): Builder
    + delay(double delay): Builder
    + count(int count): Builder
    + names(String[] names): Builder
    + open(double open): Builder
    + close(double close): Builder
    + build(): Claw
    # self(): Builder
}

class "Builder<Builder>" as Drive_Builder {
    + Builder(LinearOpMode opMode, HardwareMap hardwareMap)
    + reverse(): Builder
    + reverse(String deviceName): Builder
    + reverse(String[] deviceNames): Builder
    + gamepad(Gamepad gamepad): Builder
    + encoder(): Builder
    + diameter(double diameter): Builder
    + gearing(double gearing): Builder
    + deadzone(double deadzone): Builder
    + logo(LogoFacingDirection logo): Builder
    + usb(UsbFacingDirection usb): Builder
    + count(int count): Builder
    + names(String[] names): Builder
    + behavior(DcMotor.ZeroPowerBehavior behavior): Builder
    + type(Type type): Builder
    + layout(Layout layout): Builder
    + build(): Drive
    # self(): Builder
}

class "Builder<Builder>" as Lift_Builder {
    + Builder(LinearOpMode opMode, HardwareMap hardwareMap)
    + reverse(): Builder
    + reverse(String deviceName): Builder
    + reverse(String[] deviceNames): Builder
    + gamepad(Gamepad gamepad): Builder
    + encoder(): Builder
    + diameter(double diameter): Builder
    + gearing(double gearing): Builder
    + deadzone(double deadzone): Builder
    + count(int count): Builder
    + names(String[] names): Builder
    + behavior(DcMotor.ZeroPowerBehavior behavior): Builder
    + up(double up): Builder
    + down(double down): Builder
    + build(): Lift
    # self(): Builder
}

Mechanism <|-- MotorMechanism
Mechanism <|-- ServoMechanism

MotorMechanism <|-- Arm
ServoMechanism <|-- Claw
MotorMechanism <|-- Drive
MotorMechanism <|-- Lift

Mechanism_Builder <|-- MotorMechanism_Builder
Mechanism_Builder <|-- ServoMechanism_Builder

MotorMechanism_Builder <|-- Arm_Builder
ServoMechanism_Builder <|-- Claw_Builder
MotorMechanism_Builder <|-- Drive_Builder
MotorMechanism_Builder <|-- Lift_Builder

Mechanism +-- Mechanism_Builder
MotorMechanism +-- MotorMechanism_Builder
ServoMechanism +-- ServoMechanism_Builder

Arm +-- Arm_Builder
Claw +-- Claw_Builder
Drive +-- Drive_Builder
Lift +-- Lift_Builder

@enduml