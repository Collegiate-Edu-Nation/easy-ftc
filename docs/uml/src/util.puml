@startuml

left to right direction

abstract class MotorMechanismUtil {
    {static}# map(double controllerValue, double deadzone): double
    {static}# scaleDirections(double power, double[] motorDirections): double[]
    {static}# calculatePositions(double distance, double diameter, double distanceMultiplier, double[] movements): int[]
}

abstract class ServoMechanismUtil {
    {static}# controlToDirection(double open, double close, double current, boolean openButton, boolean closeButton): double
    {static}# languageToDirection(String direction, double open, double close, String mechanismName): double
}

class ArmUtil {
    {static}# controlToDirection(double power, boolean lb, boolean rb): double
    {static}# languageToDirection(String direction): double
}

class DriveUtil {
    {static}# controlToDirection(int count, String type, String layout, double deadzone, double heading, float leftY, float leftX, float rightY, float rightX): double[]
    {static}# languageToDirection(int count, String type, double power, String direction): double[]
}

class LiftUtil {
    {static}# controlToDirection(double deadzone, float lt, float rt): double
    {static}# languageToDirection(String direction): double
}

class ColorUtil {
    {static}# dominantColor(int[] rgbRaw, int[] rgbOffsets, double calibrationValue): String
    {static}# weakColor(int[] rgbRaw, int[] rgbOffsets): String
    {static}- normalize(int[] rgbRaw, int[] rgbOffsets): int[]
    {static}- max(int[] rgbNormalized): int
    {static}- min(int[] rgbNormalized): int
}

MotorMechanismUtil <|-- ArmUtil
MotorMechanismUtil <|-- DriveUtil
MotorMechanismUtil <|-- LiftUtil

@enduml