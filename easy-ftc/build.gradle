// SPDX-FileCopyrightText: 2024 Collegiate Edu-Nation
// SPDX-License-Identifier: GPL-3.0-or-later

plugins {
    id 'com.android.library'
}

// vars
int tgt = 30
String dir = '..'
String bld = 'build'
String ftcBase = 'org.firstinspires.ftc:'
String ftcV = ':10.1.1'
String hardware = ftcBase + 'Hardware' + ftcV
String core = ftcBase + 'RobotCore' + ftcV

android {
    namespace 'org.edu_nation.easy_ftc'

    compileSdk tgt

    defaultConfig {
        minSdk 24
        targetSdk tgt
        versionCode = 1
        versionName = '1.0'
        testInstrumentationRunner 'androidx.test.runner.AndroidJUnitRunner'
    }

    buildTypes {
        release {
            minifyEnabled false
            enableUnitTestCoverage true
        }
    }

    // ignore "debug" variant
    variantFilter { variant ->
        if (variant.name == ("debug")) {
            variant.setIgnore(true)
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    // ignores deprecation of targeting 1_8
    tasks.withType(JavaCompile) {
        options.compilerArgs << '-Xlint:-options'
    }

    // set lint baseline
    lint {
        baseline = file('lint-baseline.xml')
    }
}

// create alias for jacoco report
task coverage(type: Exec) {
    group = 'reporting'
    description = 'Generates Jacoco coverage report as HTML in build/reports/coverage'

    workingDir dir
    commandLine './gradlew', 'createReleaseUnitTestCoverageReport'
}

// create task for generating uml
task uml(type: Exec) {
    group = bld
    description = 'Generate UML in docs/uml from uml.puml'

    workingDir dir
    commandLine '/nix/store/4898h3r0igkl39fnbzakbnlg2g055ji0-plantuml-1.2024.8/bin/plantuml',
        './docs/uml/src/*.puml', '-o', '../out'
    ignoreExitValue true
}

// create tasks for docs
android.libraryVariants.all { variant ->
    if (variant.name == 'release') {
        // generate javadoc
        task apidoc(type: Javadoc, dependsOn: uml) {
            group = bld
            description = 'Generate the Javadoc for the public API'

            source = variant.javaCompileProvider.get().source
            classpath = files(((Object) android.bootClasspath.join(File.pathSeparator)))
            classpath += variant.javaCompileProvider.get().classpath
            destinationDir = file('../docs/javadoc')
            failOnError false

            options {
                setMemberLevel JavadocMemberLevel.PUBLIC
                setStylesheetFile file('../docs/stylesheet.css')
                addBooleanOption('Xdoclint:none', true)
            }
        }

        // generate docs
        task docs(type: Exec, dependsOn: apidoc) {
            group = bld
            description = 'Generate Documentation in docs/ using Jekyll, PlantUML, and Javadoc'

            workingDir dir
            commandLine 'mkdocs', bld
        }
    }
}

// create task for compressing myBlocks to a zip archive
task myBlocks(type: Zip) {
    group = bld
    description = 'Compress myBlocks to a zip archive for release'

    archiveBaseName = 'myBlocks'
    destinationDirectory = file('build/outputs/zip')
    from(files('./src/myBlocks/java/org/firstinspires/ftc/teamcode'))
}

dependencies {
    // src
    implementation core
    implementation hardware
    implementation 'androidx.appcompat:appcompat:1.2.0'

    // test
    testImplementation core
    testImplementation 'junit:junit:4.13.2'
    testImplementation 'org.mockito:mockito-core:5.14.2'
    testImplementation 'org.apache.commons:commons-lang3:3.17.0'
    androidTestImplementation 'androidx.test.ext:junit:1.2.1'
}
