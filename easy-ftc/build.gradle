plugins {
    id 'com.android.library'
    id "com.hiya.jacoco-android" version "0.2"
}

android {
    compileSdk 29

    defaultConfig {
        minSdk 24
        targetSdk 29
        versionCode = 1
        versionName = "1.0"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        release {
            minifyEnabled false
            enableUnitTestCoverage true
        }
    }

    // ignore "debug" variant
    variantFilter { variant ->
        if(variant.name.equals("debug")) {
            variant.setIgnore(true);
        }
    }
    
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
}

// Configure jacoco
jacocoAndroidUnitTestReport {
    csv.enabled false
    html.enabled true
    xml.enabled false
}

// create alias for jacoco report
task coverage(dependsOn: jacocoTestReport) {
    group = "reporting"
    description = "Generates Jacoco coverage report as HTML in build/jacoco/jacocoHtml"
}

// create task for generating uml
task uml(type: Exec) {
    group = "build"
    description = "Generate UML in docs/uml from uml.puml"

    workingDir ".."
    commandLine "/nix/store/7yikgfacxcl69wxaq7fxh017gl8p1ma6-plantuml-1.2024.7/bin/plantuml", "./docs/uml/src/*.puml", "-o", "../out"
    ignoreExitValue true
}

// create task for generating docs
task docs(type: Exec, dependsOn: uml) {
    group = "build"
    description = "Generate Javadoc in docs/ for public classes, not including Mechanism or Tests"

    workingDir ".."
    commandLine "javadoc", "-d", "docs", "-classpath", "easy-ftc/build/aarLibraries/org.firstinspires.ftc-RobotCore-10.1.0.jar:easy-ftc/build/aarLibraries/org.firstinspires.ftc-Vision-10.1.0.jar:easy-ftc/build/aarLibraries/org.firstinspires.ftc-Hardware-10.1.0.jar", "-sourcepath", "easy-ftc/src/main/java/", "org.edu_nation.easy_ftc.mechanism", "org.edu_nation.easy_ftc.sensor", "-public", "-overview", "docs/overview.html"
    ignoreExitValue true
}

// create task for compressing myBlocks to a zip archive
task myBlocks(type: Zip) {
    group = "build"
    description = "Compress myBlocks to a zip archive for release"

    archiveName = "myBlocks.zip"
    destinationDir = file('build/outputs/zip')
    from (files('./src/myBlocks/java/org/firstinspires/ftc/teamcode'))
}

dependencies {
    compileOnly 'org.firstinspires.ftc:RobotCore:10.1.0'
    compileOnly 'org.firstinspires.ftc:Hardware:10.1.0'
    compileOnly 'org.firstinspires.ftc:Vision:10.1.0'

    implementation 'androidx.appcompat:appcompat:1.2.0'
    implementation 'com.google.android.material:material:1.3.0'
    testImplementation 'junit:junit:4.13.1'
    testImplementation 'org.mockito:mockito-core:3.6.28'
    testImplementation 'org.firstinspires.ftc:RobotCore:10.1.0'
    androidTestImplementation 'androidx.test.ext:junit:1.1.2'
}
