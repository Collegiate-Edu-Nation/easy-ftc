// SPDX-FileCopyrightText: 2024 Collegiate Edu-Nation
//
// SPDX-License-Identifier: GPL-3.0-or-later

plugins {
    id 'com.android.library'
}

android {
    namespace "org.edu_nation.easy_ftc"

    compileSdk 30

    defaultConfig {
        minSdk 24
        targetSdk 30
        versionCode = 1
        versionName = "1.0"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        release {
            minifyEnabled false
            enableUnitTestCoverage true
        }
    }

    // ignore "debug" variant
    variantFilter { variant ->
        if(variant.name.equals("debug")) {
            variant.setIgnore(true);
        }
    }
    
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    lint {
        baseline = file("lint-baseline.xml")
    }
}

// create alias for jacoco report
task coverage(type: Exec) {
    group = "reporting"
    description = "Generates Jacoco coverage report as HTML in build/reports/coverage"

    workingDir ".."
    commandLine "./gradlew", "createReleaseUnitTestCoverageReport"
}

// create task for generating uml
task uml(type: Exec) {
    group = "build"
    description = "Generate UML in docs/uml from uml.puml"

    workingDir ".."
    commandLine "/nix/store/spw80606bd9f1617fm07zknsn9ccqsk0-plantuml-1.2024.7/bin/plantuml", "./docs/uml/src/*.puml", "-o", "../out"
    ignoreExitValue true
}

// create tasks for docs
android.libraryVariants.all { variant ->
    if (variant.name == 'release') {
        // generate javadoc
        task apidoc(type: Javadoc, dependsOn: uml) {
            group = "build"
            description = "Generate the Javadoc for the public API's"

            source = variant.javaCompileProvider.get().source
            classpath = files(((Object) android.bootClasspath.join(File.pathSeparator)))
            classpath += variant.javaCompileProvider.get().classpath
            destinationDir = file('../docs/javadoc')
            failOnError false

            options {
                setMemberLevel JavadocMemberLevel.PUBLIC
                setStylesheetFile file('../docs/stylesheet.css')
            }
        }

        // generate docs
        task docs(type: Exec, dependsOn: apidoc) {
            group = "build"
            description = "Generate Documentation in docs/ using Jekyll, PlantUML, and Javadoc"

            workingDir ".."
            commandLine "mkdocs", "build"
        }
    }
}

// create task for compressing myBlocks to a zip archive
task myBlocks(type: Zip) {
    group = "build"
    description = "Compress myBlocks to a zip archive for release"

    archiveBaseName = "myBlocks"
    destinationDirectory = file('build/outputs/zip')
    from (files('./src/myBlocks/java/org/firstinspires/ftc/teamcode'))
}

dependencies {
    implementation 'org.firstinspires.ftc:RobotCore:10.1.1'
    implementation 'org.firstinspires.ftc:Hardware:10.1.1'

    implementation 'androidx.appcompat:appcompat:1.2.0'
    testImplementation 'junit:junit:4.13.1'
    testImplementation 'org.mockito:mockito-core:3.6.28'
    testImplementation 'org.apache.commons:commons-lang3:3.11'
    testImplementation 'org.firstinspires.ftc:RobotCore:10.1.1'
    androidTestImplementation 'androidx.test.ext:junit:1.1.2'
}
